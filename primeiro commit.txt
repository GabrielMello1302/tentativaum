Para salver um código antes de lança-lo para o repositório local, utilizamos o comando: Git add .
Após salvo, iremos fazer o commit desse repositório para a branch com o comando: git commit -m "comentario"
Para finalizar e salvar no repositario local usamos: git push ( caso seja a primeira vez de uma nova branch,
sera mostrado o código antes de lança-lo).

************************************************************************************************************************************

Podemos clonar um repositario local, a partir do link criado pelo git.
Criaremos uma pasta que servira de local de armazenamento para esse novo repositório.
Dentro dela acessamos o "Git Bash".
Usaremos o comando: git clone ( e clicaremos com o scroll do mouse para copiar a URL ).
E após isto acessando novamente a pasta criada, todos os arquivos que estão no repositório(git) da URL passaram a existir nesta 
nova pasta.

/*Geralmente a branch PADRAO de uso é a develop, a MASTER normalmente o funcionario não tem acesso para enviar códigos.*/

Após criada o clone do repositório, iremos abrir no VScode esta pasta clone,
utilizando o CTRL+J abrimos o terminal e mudamos de powershell para Git Bash.
Nele trocaremos a branch MASTER pela DEVELOP com o comando: git checkout develop.

Utlilizaremos o código: git pull
para baixar qualquer tipo de alteração que estava no código do github, e 
ele nos mostra a mensagem de que ja estamos com a ultima versao.

A partir disto criaremos uma branch nova (feature/recurso) usando o comando: 
 git checkout -b feature/tela-login

A sintaxe : -b. Nos indica que o RECURSO que esta sendo criado, será na branch utilizada no momento da criação no caso (Develop).
Ao executar esse comando ele criou uma branch nova chamada "Feature/tela-login" a parit da develop.

Em resumou foi-se criada uma branch a partir de outra, sendo que está é uma pasta clone do repositório do Github.

Em uma empresa é este processo que é feito: 
1º: baixa o código do git em uma pasta local (clone).
2º: muda da branch MASTER(ou qualquer que seja) para DEVELOP.
3º: e a partir dela cria-se uma nova branch.

Se faz este processo para que não se altere nada dentro da BRANCH ( Master, Develop, Homolocacao, etc).
E estas branch devem apenas receberem atualização com o PULL REQUEST.

Muitas empresas teem padrão na criação de BRANCH, Geralmente na maioria dos casos, 
o nome da branch acompanha a ação que foi realizada, por exemplo: bugfixed/tela-login.

Agora vamos fazer o merging (fundir) dessa branch criada com a branch DEVELOP, e subir para o repositório.

Então como querermos implementar esse branch ( feature/tela-login). para a DEVELOP temos que acessar a develop.
Para isso utilizamos o código ja visto: 
git checkout develop, e: git pull.

Para baixar qualquer tipo de alteração.
E finalizamos com o comando para fundir as duas: 
git merge feature/tela-login.

Então só nos falta mandar para o repositório, utilizando o comando: git push.
